(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{289:function(n,t,e){"use strict";e.r(t);var a=e(14),s=Object(a.a)({},(function(){var n=this,t=n._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"状态模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#状态模式"}},[n._v("#")]),n._v(" 状态模式")]),n._v(" "),t("blockquote",[t("p",[n._v("由许多杯好喝的生椰拿铁想到的。")]),n._v(" "),t("p",[n._v("马上就要进入夏天啦！要说夏天必备的饮料，冰凉的椰汁绝对算是其中一个。关于**夏天最好的期待，"),t("strong",[n._v("我脑海中时常会浮现出大海、沙滩、遮阳伞、一大颗")]),n._v("椰子。"),t("strong",[n._v("特别喜欢椰汁的清爽和椰肉的甜香")]),n._v("，**所以出去也会喜欢买椰子水；在一些海南餐厅或者泰式餐厅，椰奶冻，也是受大家所欢迎的。喜欢创新的咖啡人当然不会错过椰子这个绝佳的食材，这两年椰味咖啡饮料也上了不少咖啡馆的菜单。"),t("strong",[n._v("所以好喝的生椰拿铁")]),n._v("火了起来，对了厚乳拿铁也很好喝哇。那么突然间就感觉咖啡机好厉害哇，除了可以制作生椰拿铁，还可以制作厚乳拿铁，香草拿铁等等，一台小小的咖啡机就能制作出不同口味的咖啡。其实咖啡机切换不同的状态制作出不同咖啡的过程其实就像是本文要讲的“状态模式”的过程。")])]),n._v(" "),t("h2",{attrs:{id:"前言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[n._v("#")]),n._v(" 前言")]),n._v(" "),t("p",[n._v("现在的生活，工作和咖啡是不可分割的整体，每个人的口味都不同，一台咖啡机可以吐出很多种类的咖啡。那么在喝咖啡之余想一想，其实“咖啡机也是一个产品。它在不同的选择下有着不同的任务：当我们选择生椰拿铁时，它进入生椰拿铁的制作工序；当我们选择美式咖啡时，它进入美式咖啡的制作工序。一台小小的机器，可以根据用户的口味产出不同口味的咖啡，想想也好厉害啊！那么我们用程序把咖啡机制作咖啡的这个过程实现一下吧。")]),n._v(" "),t("h2",{attrs:{id:"例子1"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#例子1"}},[n._v("#")]),n._v(" 例子1")]),n._v(" "),t("p",[n._v("假设一台咖啡机需要制作四种咖啡，这些不同的”选择“间的切换，本质就是状态的切换。")]),n._v(" "),t("p",[n._v("在这个能做五种咖啡的咖啡机体内，蕴含着五种状态：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("美式咖啡：黑咖啡\n普通拿铁：黑咖啡+牛奶\n生椰拿铁：黑咖啡+牛奶+厚椰乳\n厚乳拿铁：黑咖啡+牛奶+炼乳\n焦糖拿铁：黑咖啡+牛奶+焦糖酱\n")])])]),t("p",[n._v("这么一梳理，思路一下子清晰了起来。作为死性不改的 "),t("code",[n._v("if-else")]),n._v("侠，我很快的写出了一套功能完备的代码：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("\n\n// 自助咖啡机\n  class CoffeeMaker {\n    constructor() {\n      // 这里面略过与咖啡状态无关的一些初始化逻辑\n      //初始化状态\n      this.state = 'init';\n    }\n    changeState(state) {\n      //记录当前的状态\n      this.state = state;\n      if (state === 'american') {\n        //如果是美式咖啡\n        // 这里面用console.log代替咖啡制作的业务逻辑\n        console.log('咖啡机吐黑咖啡');\n      } else if (state === 'ordinary') {\n        //如果是普通拿铁\n        console.log('咖啡机吐黑咖啡加点奶');\n      } else if (state === 'raw-coconut') {\n        //如果是生椰拿铁\n        console.log('咖啡机吐黑咖啡加点奶再加点厚椰乳');\n      } else if (state === 'thick-milk') {\n        //如果是厚乳拿铁\n        console.log('咖啡机吐黑咖啡加点奶再加点炼乳');\n      }\n    }\n  }\n  // 测试一下\n  const mk = new CoffeeMaker();\n  mk.changeState('american'); //咖啡机吐黑牛奶\n")])])]),t("p",[n._v("不，我必不可能再做‘if-else’侠。我要进行改装！")]),n._v(" "),t("h2",{attrs:{id:"改造咖啡机的状态切换机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#改造咖啡机的状态切换机制"}},[n._v("#")]),n._v(" 改造咖啡机的状态切换机制")]),n._v(" "),t("h2",{attrs:{id:"职责分离"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#职责分离"}},[n._v("#")]),n._v(" 职责分离")]),n._v(" "),t("p",[n._v("首先，映入眼帘最大的问题，就是咖啡制作的过程不可复用。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v(" changeState(state) {\n  //记录当前的状态\n  this.state = state;\n  if (state === 'american') {\n  //如果是美式咖啡\n  // 这里面用console.log代替咖啡制作的业务逻辑\n  console.log('咖啡机吐黑咖啡');\n  } else if (state === 'ordinary') {\n  //如果是普通拿铁\n   console.log('咖啡机吐黑咖啡加点奶');\n  } else if (state === 'raw-coconut') {\n  //如果是生椰拿铁\n  console.log('咖啡机吐黑咖啡加点奶再加点厚椰乳');\n  } else if (state === 'thick-milk') {\n  //如果是厚乳拿铁\n  console.log('咖啡机吐黑咖啡加点奶再加点炼乳');\n  }\n}\n")])])]),t("p",[t("strong",[n._v("问题发现")]),n._v("：这个"),t("code",[n._v("changeState")]),n._v("函数，它好好管好自己的事（状态切换）不行吗？怎么连做咖啡的过程也写在这里面？这不合理。")]),n._v(" "),t("p",[n._v("别的不说，就说好喝的生椰拿铁吧，它就是拿铁加点厚椰乳。那我就没必要再把做拿铁的逻辑在香草拿铁里再写一遍。可以直接调用拿铁制作工序对应的函数，然后末尾补个加厚椰乳的动作就行了呢。但是，我们现在所有的制作工序都没有提出来函数化，而是以一种极不优雅的姿势挤在了"),t("code",[n._v("changeState")]),n._v(" 里面，谁也别想复用谁。太费劲了，咱们赶紧给它搞一搞职责分离：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 进行改装\n  // 职责分离\n  class CoffeeMaker {\n    constructor() {\n      this.state = state;\n    }\n    changeState(state) {\n      //记录当前的状态\n      this.state = state;\n      if (state === 'american') {\n        //如果是美式咖啡\n        // 这里面用console.log代替咖啡制作的业务逻辑\n        this.americanCoffee();\n      } else if (state === 'ordinary') {\n        //如果是普通拿铁\n        this.ordinaryLatte();\n      } else if (state === 'raw-coconut') {\n        //如果是生椰拿铁\n        this.rawCoconutLatte();\n      } else if (state === 'thick-milk') {\n        //如果是厚乳拿铁\n        this.thickMilkLatte();\n      }\n    }\n\n    americanProcess() {\n      console.log('咖啡机吐黑咖啡');\n    }\n    ordinaryProcess() {\n      this.americanProcess();\n      console.log('再加点奶');\n    }\n    rawCoconutLatte() {\n      this.ordinaryProcess();\n      console.log('再加点厚椰乳');\n    }\n    thickMilkLatte() {\n      this.ordinaryProcess();\n      console.log('再加点炼乳');\n    };\n  }\n  const mk1 = new CoffeeMaker();\n  mk1.changeState('ordinaryProcess'); //咖啡机吐黑咖啡 再加点奶  \n")])])]),t("h2",{attrs:{id:"开放封闭"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#开放封闭"}},[n._v("#")]),n._v(" 开放封闭")]),n._v(" "),t("p",[n._v("上面只是解决了复用的问题")]),n._v(" "),t("p",[n._v("但 'if-else '仍然活得好好的 ，假如我现在想去增加焦糖拿铁这个咖啡品种，就不得不修改 changeState的函数逻辑，这就违反了“开放封闭”的原则。")]),n._v(" "),t("p",[n._v("同时一个函数里面有这么多的判断，也是十分不合理的。现在要像策略模式一样，想办法把咖啡机状态和咖啡制作工序之间的映射关系体现出来。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("const stateToProcessor = {\n americanProcess() {\n   console.log('咖啡机吐黑咖啡');\n },\n ordinaryProcess() {\n   this.americanProcess();\n   console.log('再加点奶');\n },\n rawCoconutLatte() {\n   this.ordinaryProcess();\n   console.log('再加点厚椰乳');\n },\n thickMilkLatte() {\n   this.ordinaryProcess();\n    console.log('再加点炼乳');\n  },\n}\nclass CoffeeMaker {\n constructor() {\n /**\n 这里略去咖啡机中与咖啡状态切换无关的一些初始化逻辑\n **/\n // 初始化状态，没有切换任何咖啡模式\n this.state = 'init';\n}\n//关注咖啡机状态切换函数\nchangeState(state) {\n//记录当前状态\nthis.state = state;\n// 若当前状态不存在，则返回\n const func = this.stateToProcessor[state];\n  if (!func) {\n   return\n    }\n  func.bind(this)();\n   }\n }\nconst mk2 = new CoffeeMaker();\nmk2.changeState('rawCoconutLatte'); // 咖啡机吐黑咖啡 再加点奶 再加点厚椰乳\n")])])]),t("p",[n._v("上面已经实现了一个js版本的状态模式")]),n._v(" "),t("p",[n._v("但这里有一点大家需要引起注意： 这种方法仅仅是看上去完美无缺， 其中却暗含一个非常重要的隐患——”stateToProcessor“里的工序函数， 感知不到咖啡机的内部状况。")]),n._v(" "),t("p",[n._v("所以需要进一步改造")]),n._v(" "),t("p",[n._v("把状态-行为映射对象作为主体类对应实例的一个属性添加进去就行了。")]),n._v(" "),t("h2",{attrs:{id:"进一步改造"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#进一步改造"}},[n._v("#")]),n._v(" 进一步改造")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("  class CoffeeMaker {\n      constructor() {\n        /**\n    这里略去咖啡机中与咖啡状态切换无关的一些初始化逻辑\n  **/\n        // 初始化状态，没有切换任何咖啡模式\n        this.state = 'init';\n      }\n      stateToProcessor = {\n        americanProcess() {\n          // 尝试在行为函数里拿到咖啡机实例的信息并输出\n          console.log('咖啡机吐黑咖啡');\n        },\n        ordinaryProcess() {\n          this.americanProcess();\n          console.log('再加点奶');\n        },\n        rawCoconutLatte() {\n          this.ordinaryProcess();\n          console.log('再加点厚椰乳');\n        },\n        thickMilkLatte() {\n          this.ordinaryProcess();\n          console.log('再加点炼乳');\n        },\n      }\n      // 关注咖啡机状态切换函数\n      changeState(state) {\n        this.state = state;\n        const func = this.stateToProcessor[state];\n        if (!func) {\n          return\n        }\n        func.bind(this)();\n      }\n    }\n\n    const mk = new CoffeeMaker();\n    mk.changeState('rawCoconutLatte'); //我只吐黑咖啡 再加点奶 再加点厚椰乳\n")])])]),t("p",[n._v("巩固一下，再给大家看一个超级玛丽的例子吧")]),n._v(" "),t("h2",{attrs:{id:"例子2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#例子2"}},[n._v("#")]),n._v(" 例子2")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v(" //创建超级玛丽状态类\n    var MarryState = function () {\n      //内部状态私有变量\n      var _currentState = {};\n      //动作与状态方法映射\n      states = {\n        jump: function () {\n          //跳跃\n          console.log('jump');\n        },\n        move: function () {\n          //移动\n          console.log('move');\n        },\n        shoot: function () {\n          //射击\n          console.log('shoot');\n        },\n        squat: function () {\n          //蹲下\n          console.log('squat');\n        },\n      };\n      //动作控制类\n      var Action = {\n        //改变状态方法\n        changeState: function () {\n          //组合动作通过传递多个参数实现\n          var arg = arguments;\n          //重置内部状态\n          _currentState = {};\n          //如果有动作还添加动作\n          if (arg.length) {\n            //遍历动作\n            for (var i = 0; i < arg.length; i++) {\n              //向内部状态添加动作\n              _currentState[arg[i]] = true;\n            }\n          }\n          //返回动作控制类\n          return this;\n        },\n        //执行动作\n        goes: function () {\n          console.log('触发一次动作');\n          //遍历内部保存的动作\n          for (var i in _currentState) {\n            //如果有动作\n            states[i] && states[i]();\n          }\n          return this;\n        }\n      }\n\n      //返回接口方法change、goes\n      return {\n        change: Action.changeState,\n        goes: Action.goes\n      }\n    };\n    //第一种方法\n    MarryState().change('jump', 'move', 'shoot', 'squat') //添加动作\n      .goes() //添加动作\n      .goes() //执行动作\n      .change('shoot') //添加射击动作\n      .goes(); //执行动作\n\n    //第二种方法\n    var marry = new MarryState();\n    marry.change().goes().goes().change().goes();\n")])])]),t("p",[n._v("所以打印结果为：")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://pan.udolphin.com/files/image/2022/4/0b65b70200922fa6e787213415b46dd2.png",alt:""}})]),n._v(" "),t("p",[n._v("现在通过两个例子，大家对状态模式是否更清晰一些了呢，但是大家有没有觉得它和策略模式有异曲同工之妙呢，下面我们来对比一下他们吧！")]),n._v(" "),t("h2",{attrs:{id:"对比策略模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对比策略模式"}},[n._v("#")]),n._v(" 对比策略模式")]),n._v(" "),t("p",[n._v("对比策略模式，这种方法更加灵活，可以把咖啡机的状态和咖啡制作工序分离开来，每个状态对应一个工序函数，这样就可以把咖啡机内部状况隐藏起来了。")]),n._v(" "),t("p",[t("strong",[n._v("状态模式")]),n._v("，更注重由状态的改变，引起的一连串方法的逻辑改变")]),n._v(" "),t("p",[t("strong",[n._v("策略模式")]),n._v("，更注重调用者如何调用，方法都是固定的。只是根据不同的状态，选择不同的状态的方法而已")]),n._v(" "),t("p",[t("strong",[n._v("举例")]),n._v("看一下 两种不同的状态")]),n._v(" "),t("p",[n._v("这里用策略模式来尝试模拟你的技能和兴趣。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('var 绝技 = {\n      思考: function () {\n        console.log("思路清晰");\n      },\n      看书: function () {\n        console.log(\'一气呵成\');\n      }\n    };\n\n    var 爱好 = {\n      敲代码: function () {\n        console.log("非常厉害");\n      },\n      解决bug: function () {\n        console.log("是个高手");\n      }\n    };\n\n    var 你 = {\n      展示绝技: function (strategy) {\n        绝技[strategy]();\n      },\n      展示爱好: function (strategy) {\n        爱好[strategy]();\n      }\n    };\n\n    你.展示绝技("思考"); // 思路清晰\n    你.展示绝技("看书"); // 一气呵成\n    你.展示爱好("敲代码"); // 非常厉害\n    你.展示爱好("解决bug"); // 是个高手\n')])])]),t("p",[n._v("上述代码封装了两组算法，每组算法内由外界来决定选择具体某种算法。")]),n._v(" "),t("p",[n._v("那么对于状态模式，也来写一下自己。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var 烦 = {\n      思考: function () {\n        console.log('头脑不灵活，思路不清晰');\n        当前心情 = 爽;\n      },\n      敲代码: function () {\n        console.log('容易敲出bug');\n      }\n    };\n\n    var 爽 = {\n      思考: function () {\n        console.log('头脑灵活，思路清晰');\n      },\n      敲代码: function () {\n        console.log('敲代码几乎不出错');\n        当前心情 = 烦;\n      }\n    };\n\n    var 当前心情 = 烦;\n\n    var 他 = {\n      思考: function () {\n        当前心情[\"思考\"]();\n      },\n      敲代码: function () {\n        当前心情[\"敲代码\"]();\n      }\n    };\n    他.思考(); // 头脑不灵活，思路不清晰\n    他.思考(); // 头脑灵活，思路清晰\n    他.敲代码(); // 敲代码几乎不出错\n    他.敲代码(); // 容易敲出bug\n")])])]),t("h2",{attrs:{id:"异同处"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#异同处"}},[n._v("#")]),n._v(" 异同处：")]),n._v(" "),t("p",[t("strong",[n._v("相同")]),n._v("： 策略模式和状态模式确实是相似的，它们都封装行为、都通过委托来实现行为分发。")]),n._v(" "),t("p",[t("strong",[n._v("异同")]),n._v("： 但策略模式中的行为函数是”潇洒“的行为函数，它们不依赖调用主体、互相平行、各自为政，井水不犯河水。 而状态模式中的行为函数，首先是和状态主体之间存在着关联，由状态主体把它们串在一起；另一方面，正因为关联着同样的一个（或一类）主体，所以不同状态对应的行为函数可能并不会特别割裂。")]),n._v(" "),t("h2",{attrs:{id:"状态模式回顾"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#状态模式回顾"}},[n._v("#")]),n._v(" 状态模式回顾")]),n._v(" "),t("h3",{attrs:{id:"定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[n._v("#")]),n._v(" 定义")]),n._v(" "),t("blockquote",[t("p",[n._v("状态模式(State Pattern) ：允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类。另一种理解： 当一个对象的内部状态发生改变时，会导致其行为的改变，这看起来像是改变了对象。")])]),n._v(" "),t("p",[n._v("这个定义比较粗糙，可能你读完仍然 get 不到它想让你干啥。这时候，我们就应该把目光转移到它解决的问题上来：")]),n._v(" "),t("blockquote",[t("p",[n._v("状态模式主要解决的是当控制一个对象状态的条件表达式过于复杂时的情况。把状态的判断逻辑转移到表示不同状态的一系列类中，可以把复杂的判断逻辑简化。")])]),n._v(" "),t("p",[n._v("状态模式既是解决程序中臃肿的分支判断语句问题，将每个分支转化为一种状态独立出来，方便每种状态的管理又不至于每次执行时遍历所有的分支。在程序中到底产出哪种行为结果，决定于选择哪种状态，而选择何种状态又是在程序运行中决定的。")]),n._v(" "),t("h3",{attrs:{id:"最终目的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#最终目的"}},[n._v("#")]),n._v(" 最终目的")]),n._v(" "),t("p",[n._v("简化分支判断流程。")]),n._v(" "),t("h1",{attrs:{id:"代理模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#代理模式"}},[n._v("#")]),n._v(" 代理模式")]),n._v(" "),t("h2",{attrs:{id:"定义-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定义-2"}},[n._v("#")]),n._v(" 定义")]),n._v(" "),t("p",[n._v("代理模式，式如其名——在某些情况下，出于种种考虑/限制，一个对象"),t("strong",[n._v("不能直接访问")]),n._v("另一个对象，需要一个"),t("strong",[n._v("第三者")]),n._v("（代理）牵线搭桥从而间接达到访问目的，这样的模式就是代理模式。")]),n._v(" "),t("h2",{attrs:{id:"举个栗子-例子"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#举个栗子-例子"}},[n._v("#")]),n._v(" 举个栗子（例子）")]),n._v(" "),t("p",[n._v("下面这张图片大家都见过吧，当我们自己不用vpn翻墙去访问谷歌浏览器的时候，会出现下面的提示，无法访问此网站。")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://pan.udolphin.com/files/image/2022/4/ed9c92c47389d57a0cf1f6a0efa4da53.png",alt:""}})]),n._v(" "),t("p",[n._v("这是为啥呢？这就要从网络请求的整个流程说起了。一般情况下，当我们访问一个 url 的时候，会发生下图的过程：")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://pan.udolphin.com/files/image/2022/4/4bf339cb79d2bef0a83ccc4973d11f9a.png",alt:""}})]),n._v(" "),t("p",[n._v("没错，比起常规的访问过程，多出了一个第三方 —— 代理服务器。这个第三方的 ip 地址，不在被禁用的那批 ip 地址之列，我们可以顺利访问到这台服务器。而这台服务器的 DNS 解析过程，没有被施加“咒语”，所以它是可以顺利访问 Google.com 的。代理服务器在请求到 Google.com 后，将响应体转发给你，使你得以间接地访问到目标网址 —— 像这种第三方代替我们访问目标对象的模式，就是代理模式。如下图")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://pan.udolphin.com/files/image/2022/4/eb0eeddcaf6367ef1dd1ee5f67a6e1f4.png",alt:""}})]),n._v(" "),t("p",[n._v("本节我们选取业务开发中最常见的四种代理类型："),t("strong",[n._v("事件代理")]),n._v("、"),t("strong",[n._v("虚拟代理")]),n._v("、"),t("strong",[n._v("缓存代理")]),n._v("和"),t("strong",[n._v("保护代理")]),n._v("来进行讲解。")]),n._v(" "),t("h2",{attrs:{id:"事件代理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#事件代理"}},[n._v("#")]),n._v(" 事件代理")]),n._v(" "),t("p",[n._v("事件代理，可能是代理模式最常见的一种应用方式，也是一道实打实的高频面试题。它的场景是一个父元素下有多个子元素，像这样：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8">\n  <meta name="viewport" content="width=device-width, initial-scale=1.0">\n  <meta http-equiv="X-UA-Compatible" content="ie=edge">\n  <title>事件代理</title>\n</head>\n<body>\n  <div id="father">\n    <a href="#">链接1号</a>\n    <a href="#">链接2号</a>\n    <a href="#">链接3号</a>\n    <a href="#">链接4号</a>\n    <a href="#">链接5号</a>\n    <a href="#">链接6号</a>\n  </div>\n</body>\n</html>\n')])])]),t("p",[n._v("我们现在的需求是，希望鼠标点击每个 a 标签，都可以弹出“我是xxx”这样的提示。比如点击第一个 a 标签，弹出“我是链接1号”这样的提示。这意味着我们至少要安装 6 个监听函数给 6 个不同的的元素(一般我们会用循环，代码如下所示），如果我们的 a 标签进一步增多，那么性能的开销会更大。")]),n._v(" "),t("p",[n._v("假如不用代理模式，我们将循环安装监听函数")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("const aNodes = document.getElementById('father').getElementsByTagName('a')\n  \nconst aLength = aNodes.length\n\nfor(let i=0;i<aLength;i++) {\n    aNodes[i].addEventListener('click', function(e) {\n        e.preventDefault()\n        alert(`我是${aNodes[i].innerText}`)                  \n    })\n}\n")])])]),t("p",[n._v("打印结果为：")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://pan.udolphin.com/files/image/2022/4/581b5caf6e3a23e2a966c2721d4b068f.png",alt:""}})]),n._v(" "),t("p",[n._v("考虑到事件本身具有“冒泡”的特性，当我们点击 a 元素时，点击事件会“冒泡”到父元素 div 上，从而被监听到。如此一来，点击事件的监听函数只需要在 div 元素上被绑定一次即可，而不需要在子元素上被绑定 N 次——这种做法就是"),t("strong",[n._v("事件代理")]),n._v("，它可以很大程度上提高我们代码的性能。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v(" // 获取父元素\n const father = document.getElementById('father')\n\n // 给父元素安装一次监听函数\n father.addEventListener('click', function (e) {\n   // 识别是否是目标子元素\n   if (e.target.tagName === 'A') {\n   // 以下是监听函数的函数体\n     e.preventDefault()\n     alert(`我是${e.target.innerText}`)\n    }\n })\n \n")])])]),t("h2",{attrs:{id:"虚拟代理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#虚拟代理"}},[n._v("#")]),n._v(" 虚拟代理")]),n._v(" "),t("p",[t("strong",[n._v("思想")]),n._v("：先占位、后加载")]),n._v(" "),t("p",[n._v("此时我们会采取“"),t("strong",[n._v("先占位、后加载")]),n._v("”的方式来展示图片 —— 在元素露出之前，我们给它一个 div 作占位，当它滚动到可视区域内时，再即时地去加载真实的图片资源，这样做既减轻了性能压力、又保住了用户体验。")]),n._v(" "),t("p",[n._v("除了图片懒加载，还有一种操作叫"),t("strong",[n._v("图片预加载")]),n._v("。预加载主要是为了避免网络不好、或者图片太大时，页面长时间给用户留白的尴尬。"),t("strong",[n._v("常见的操作")]),n._v("是先让这个 img 标签展示一个"),t("strong",[n._v("占位图，"),t("strong",[n._v("然后创建一个 "),t("strong",[n._v("Image 实例")]),n._v("，让这个 Image 实例的 "),t("strong",[n._v("src")]),n._v("指向")]),n._v("真实的目标图片地址")]),n._v("、观察该 Image 实例的加载情况 —— 当其对应的真实图片加载完毕后，即已经有了该图片的缓存内容，再将 DOM 上的 img 元素的 src 指向真实的目标图片地址。此时我们直接去取了目标图片的缓存，所以展示速度会非常快，从占位图到目标图片的时间差会非常小、小到用户注意不到，这样体验就会非常好了。")]),n._v(" "),t("p",[n._v("上面的思路，我们可以不假思索地实现如下")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 图片懒加载预加载等 \n    class PreLoadImage {\n      // 占位图的url地址\n      static LOADING_URL = 'xxxxxx';\n\n      constructor(imgNode) {\n        // 获取该实例对应的DOM节点\n        this.imgNode = imgNode;\n      }\n      // 该方法用于设置真实的图片地址\n      setSrc(targetUrl) {\n        // img节点初始化时展示的是一个占位图\n        this.imgNode.src =\n          PreLoadImage.LOADING_URL\n        // 创建一个帮我们加载图片的Image实例\n        const image = new Image();\n        // 监听目标图片加载的情况，\n        // 完成时再将DOM上的img节点的src属性设置为目标图片的url\n        image.onload = () => {\n          this.imgNode.src = targetUrl;\n        }\n        // 设置src属性，\n        // Image实例开始加载图片\n        image.src = targetUrl;\n      }\n    }\n")])])]),t("p",[n._v("这个 "),t("code",[n._v("PreLoadImage")]),n._v(" 乍一看没问题，但其实违反了我们设计原则中的"),t("strong",[n._v("单一职责原则")]),n._v("。"),t("code",[n._v("PreLoadImage")]),n._v(" 不仅要负责图片的加载，还要负责 DOM 层面的操作（img 节点的初始化和后续的改变）。这样一来，就"),t("strong",[n._v("出现了两个可能导致这个类发生变化的原因")]),n._v("。")]),n._v(" "),t("p",[n._v("好的做法是将两个逻辑分离，让 "),t("code",[n._v("PreLoadImage")]),n._v(" 专心去做 DOM 层面的事情（真实 DOM 节点的获取、img 节点的链接设置），再找一个对象来专门来帮我们搞加载——这两个对象之间缺个媒婆，这媒婆非代理器不可：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("class PreLoadImage {\n    constructor(imgNode) {\n        // 获取真实的DOM节点\n        this.imgNode = imgNode\n    }\n     \n    // 操作img节点的src属性\n    setSrc(imgUrl) {\n        this.imgNode.src = imgUrl\n    }\n}\n\nclass ProxyImage {\n    // 占位图的url地址\n    static LOADING_URL = 'xxxxxx'\n\n    constructor(targetImage) {\n        // 目标Image，即PreLoadImage实例\n        this.targetImage = targetImage\n    }\n    \n    // 该方法主要操作虚拟Image，完成加载\n    setSrc(targetUrl) {\n       // 真实img节点初始化时展示的是一个占位图\n        this.targetImage.setSrc(ProxyImage.LOADING_URL)\n        // 创建一个帮我们加载图片的虚拟Image实例\n        const virtualImage = new Image()\n        // 监听目标图片加载的情况，完成时再将DOM上的真实img节点的src属性设置为目标图片的url\n        virtualImage.onload = () => {\n            this.targetImage.setSrc(targetUrl)\n        }\n        // 设置src属性，虚拟Image实例开始加载图片\n        virtualImage.src = targetUrl\n    }\n}\n")])])]),t("p",[t("code",[n._v("ProxyImage")]),n._v(" 帮我们调度了预加载相关的工作，我们可以通过 "),t("code",[n._v("ProxyImage")]),n._v(" 这个代理，实现对真实 img 节点的间接访问，并得到我们想要的效果。")]),n._v(" "),t("p",[n._v("在这个实例中，"),t("code",[n._v("virtualImage")]),n._v(" 这个对象是一个“幕后英雄”，它始终存在于 JavaScript 世界中、代替真实 DOM 发起了图片加载请求、完成了图片加载工作，却从未在渲染层面抛头露面。因此这种模式被称为“虚拟代理”模式。")]),n._v(" "),t("h2",{attrs:{id:"虚拟代理总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#虚拟代理总结"}},[n._v("#")]),n._v(" 虚拟代理总结")]),n._v(" "),t("p",[t("code",[n._v("ProxyImage")]),n._v(" 帮我们调度了预加载相关的工作，我们可以通过 ProxyImage 这个代理， 实现对真实 img 节点的间接访问，并得到我们想要的效果。 在这个实例中，"),t("code",[n._v("virtualImage")]),n._v("这个对象是一个“幕后英雄”， 它始终存在于 JavaScript 世界中、代替真实 DOM 发起了图片加载请求、完成了 图片加载工作，却从未在渲染层面抛头露面。 因此这种模式被称为“虚拟代理”模式。")]),n._v(" "),t("h2",{attrs:{id:"缓存代理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缓存代理"}},[n._v("#")]),n._v(" 缓存代理")]),n._v(" "),t("p",[n._v("缓存代理比较好理解， 它应用于一些计算量较大的场景里。 在这种场景下， 我们需要“ 用空间换时间”—— 当我们需要用到某个已经计算过的值的时候， 不想再耗时进行二次计算， 而是希望能从内存里去取出现成的计算结果。 这种场景下， 就需要一个代理来帮我们在进行计算的同时， 进行计算结果的缓存了。")]),n._v(" "),t("p",[n._v("一个比较典型的例子， 是对传入的参数进行求和：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v(" // addAll方法会对你传入的所有参数做求和操作\n    const addAll = function () {\n      console.log('进行了一次新计算')\n      let result = 0\n      const len = arguments.length\n      for (let i = 0; i < len; i++) {\n        result += arguments[i]\n      }\n      return result\n    }\n    // 为求和方法创建代理\n    const proxyAddAll = (function () {\n      // 求和结果的缓存池\n      const resultCache = {}\n      return function () {\n        // 将入参转化为一个唯一的入参字符串\n        const args = Array.prototype.join.call(arguments, ',')\n\n        // 检查本次入参是否有对应的计算结果\n        if (args in resultCache) {\n          // 如果有，则返回缓存池里现成的结果\n          return resultCache[args]\n        }\n        return resultCache[args] = addAll(...arguments)\n      }\n    })();\n    console.log(proxyAddAll(1, 2, 3, 4, 5, 6));\n    console.log(proxyAddAll(1, 2, 3, 4, 5, 6));\n    console.log(proxyAddAll(1, 2, 3, 4, 5, 6));\n    console.log(proxyAddAll(1, 2, 3, 4, 5, 6));\n    console.log(proxyAddAll(1, 2, 3, 4, 5, 6));\n    console.log(proxyAddAll(1, 2, 3, 4, 5, 6));\n")])])]),t("p",[n._v("打印结果为")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://pan.udolphin.com/files/image/2022/4/ce3044eb239bf1cdeb0f8b05c5762abc.png",alt:""}})]),n._v(" "),t("h2",{attrs:{id:"保护代理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#保护代理"}},[n._v("#")]),n._v(" 保护代理")]),n._v(" "),t("h3",{attrs:{id:"前置知识-es6中的proxy"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前置知识-es6中的proxy"}},[n._v("#")]),n._v(" 前置知识： ES6中的Proxy")]),n._v(" "),t("p",[n._v("在 ES6 中，提供了专门以代理角色出现的代理器 ——"),t("code",[n._v("Proxy")]),n._v("。它的基本用法如下：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("const proxy = new Proxy(obj, handler)\n")])])]),t("p",[n._v("第一个参数是我们的目标对象，也就是接下来提到的"),t("code",[n._v('"hotPot"')]),n._v("。")]),n._v(" "),t("p",[t("code",[n._v("handler")]),n._v(' 也是一个对象，用来定义代理的行为，相当于接下来提到的"某外卖平台"。')]),n._v(" "),t("p",[n._v("当我们通过 "),t("code",[n._v("proxy")]),n._v("去访问目标对象的时候，handler会对我们的行为作一层拦截，我们的每次访问都需要经过"),t("code",[n._v("handler")]),n._v("这个第三方。")]),n._v(" "),t("h3",{attrs:{id:"举个例子"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#举个例子"}},[n._v("#")]),n._v(" "),t("strong",[n._v("举个例子")])]),n._v(" "),t("p",[n._v("模拟某外卖平台充值vip会员，在vip身份内购买新的优惠券功能(一次只能选择一种优惠卷购买形式（比如10元4张，15元6张，20元8张...），不能混合购买，或者多购买)")]),n._v(" "),t("h3",{attrs:{id:"getting层面的拦截"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#getting层面的拦截"}},[n._v("#")]),n._v(" getting层面的拦截")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("  // 吃火锅 火锅基本信息\n     const hotPot = {\n      //名字\n      name: '麻辣香锅',\n      //是否可以使用优惠券\n      coupon: false,\n      //是否是vip用户\n      isVipUser: false,\n    }\n    \n    // 购买人信息\n    const buyerInfo = {\n      // ...一些必要的信息,\n      isValidated: true, //是否验证过 比如注册登录\n      isVipUser: false,  //是否为vip用户\n\n    };\n    \n    // 某团，某宝 代理 出现了（当前使用的这个平台）\n    const platform = new Proxy(hotPot, {\n    \n      get: function (hotPot, key) {\n        if (!buyerInfo.isValidated) {\n          alert('您还没有完成验证哦')\n          return\n        }\n        //...(此处省略其它有的没的各种校验逻辑)\n        // 此处我们认为只有验证过（注册登录）的用户才可以购买VIP\n        if (buyerInfo.isValidated && !buyerInfo.isVipUser) {\n          alert('只有VIP才可以使用优惠券哦')\n          return\n        }\n      }\n    });\n")])])]),t("p",[n._v("以上主要是getter层面的拦截，")]),n._v(" "),t("p",[n._v("其实也可以在setter层面拦截。")]),n._v(" "),t("p",[n._v("假如已经购买过了，但是充会员时的四张优惠卷已经用完了，现在可以在vip身份里面花钱购买优惠券，继续享受优惠券")]),n._v(" "),t("p",[n._v("规定不同选择的优惠券不同，")]),n._v(" "),t("p",[n._v("规定优惠券的数据结构由number和value组成")]),n._v(" "),t("h3",{attrs:{id:"setting层面的拦截"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#setting层面的拦截"}},[n._v("#")]),n._v(" setting层面的拦截")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v(" // 假如已经是vip会员了，但是成为vip会员时的四张优惠卷已经用完了，现在可以在vip身份里面(vip身份有效期为一个月)花钱购买优惠券，继续享受优惠券\n    // 规定不同选择的优惠券不同，\n    // 规定优惠券的数据结构由number和value组成\n    const newCoupon = {\n      number: 4,\n      value: 10,\n    }\n    // 为用户增开newCoupon字段存储购买新的优惠券\n    const hotPotNew = {\n      //名字\n      name: '麻辣香锅',\n      //是否可以使用优惠券\n      coupon: false,\n      //是否是vip用户\n      isVipUser: false,\n      //新的优惠卷数组（数量(几组)）\n      newCoupons: [],\n      // 拒绝同时购买两次优惠券,同时开通优惠券\n      topTime: 1,\n      // 新购买的优惠券是否使用完,记录vip用户本月最近一次开通的优惠\n      lastNewCoupon: newCoupon,\n    }\n    // 外卖平台推出充值vip成为vip会员 使用完 赠送的四次优惠券后 继续购买新的优惠券的功能\n    const platform = new Proxy(hotPotNew, {\n       get: function (hotPot, key) {\n        if (!buyerInfo.isValidated) {\n          alert('您还没有完成验证哦')\n          return\n        }\n        //...(此处省略其它有的没的各种校验逻辑)\n        // 此处我们认为只有验证过（注册登录）的用户才可以购买VIP\n        if (buyerInfo.isValidated && !buyerInfo.isVipUser) {\n          alert('只有VIP才可以使用优惠券哦')\n          return\n        }\n      },\n      set: function (hotPotNew, key, val) {\n        //已经重新购买优惠券，不能同时购买两次（只有新的优惠券使用完才能再次购买）\n        if (key === 'newCoupons') {\n\n          if (hotPotNew.topTime > 1) {\n            alert('尊敬的vip用户，您已经购买过优惠券了，请使用完再继续购买吧，不要重复购买哟！')\n            return;\n          }\n        }\n        hotPotNew.lastCoupon = val;\n        hotPotNew.newCoupons = [...hotPotNew.newCoupons, val];\n      }\n    });\n")])])]),t("p",[n._v("代理模式到这里结束啦，因为代理模式比较偏底层，所以还是推荐大家去读一下，阮一峰的《ECMAScript 6 入门教程》里面的proxy，链接地址为："),t("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/proxy",target:"_blank",rel:"noopener noreferrer"}},[n._v("https://es6.ruanyifeng.com/#docs/proxy"),t("OutboundLink")],1),n._v("，这样可以大家去更好的了解代理模式。")]),n._v(" "),t("h1",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[n._v("#")]),n._v(" 总结")]),n._v(" "),t("p",[n._v("本文介绍了状态模式与代理模式两种设计模式。")]),n._v(" "),t("p",[n._v("希望可以让各位读者对这两种设计模式思想有一个更清楚的了解，能够在代码中可应用的地方应用上这两种思想，提高代码的可维护性与可复用性。如有疑问，可以与我交流，大家共同学习与进步。")]),n._v(" "),t("p",[n._v("感谢您的阅读，我是数字办的祁文杰，期待与您共同成长！！！")])])}),[],!1,null,null,null);t.default=s.exports}}]);