(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{288:function(t,a,e){"use strict";e.r(a);var n=e(14),s=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),a("p",[t._v("前面文杰同学分享了四个设计模式，分别是策略模式、观察者模式、状态模式以及代理模式，其中前三个都属于设计模式中的行为模式，最后一个为结构型模式。那么其实到目前为止，我们还没有接触过创建型模式。")]),t._v(" "),a("p",[t._v("在这里引入23个设计模式的分类，它总体分被为三大类：行为型模式、结构型模式、创建型模式。")]),t._v(" "),a("p",[t._v("简言之，")]),t._v(" "),a("ul",[a("li",[t._v("创建型模式——关注于分离对象的创建和使用")]),t._v(" "),a("li",[t._v("结构型模式——描述如何将类或者对象结合在一起形成更大的结构")]),t._v(" "),a("li",[t._v("行为型模式——不仅仅关注类和对象的结构，而且重点关注它们之间的相互作用")])]),t._v(" "),a("p",[t._v("有关于行为型模式，文杰同学在前两期已经分享过三个相关模式了，相信大家应该深有体会了，那么关于结构型和创建型这两种模式分类，我希望能够以更具体形象的方式来描述其概念，这里我选了两张图片：")]),t._v(" "),a("ul",[a("li",[t._v("创建型：")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://pan.udolphin.com/files/image/2022/4/46c7d63c897581583fdc77a214f0098d.png",alt:""}})]),t._v(" "),a("p",[t._v("我们说，创建型模式的作用是将模块中对象的创建和对象的使用分离。为了使软件的结构更加清晰 ——就像乐高，相同的零件组合拼接成各种结构，使用不同零件的过程中我们不需要关注这些零件如果被生产出来。")]),t._v(" "),a("ul",[a("li",[t._v("结构型")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://pan.udolphin.com/files/image/2022/4/afe6b3c2edb43967bed5fe35c740e5b2.png",alt:""}})]),t._v(" "),a("p",[t._v("而结构型，描述如何将类或者对象组装在一起形成更大的结构-——就像搭积木，可以通过简单积木的组合形成功能更强大更复杂的的结构。")]),t._v(" "),a("p",[t._v("接下来我们去看看具体的创建型模式分类里的工厂模式和结构型模式分类里的装饰器模式，去具体感受下他们的区别吧。")]),t._v(" "),a("h2",{attrs:{id:"工厂模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#工厂模式"}},[t._v("#")]),t._v(" 工厂模式")]),t._v(" "),a("p",[t._v("首先说到工厂模式，不得不提到这个与之非常相似的构造器模式，它与工厂模式有很多 相似之处。")]),t._v(" "),a("h3",{attrs:{id:"构造器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构造器"}},[t._v("#")]),t._v(" 构造器")]),t._v(" "),a("p",[t._v("这里我有一个非常简单的场景，我需要记录小组成员信息，那么需要创建一些对象用来描述成员姓名和年龄，这时我写出如下代码：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("const aa = {\n\tname: 'aa',\n\tage: 25\n}\n\nconst bb = {\n\tname: 'bb',\n\tage: 24\n}\n")])])]),a("p",[t._v("可是如果小组成员太多的话，我们不能每一位成员都要这样手动去创建一个对象呀。")]),t._v(" "),a("p",[t._v("还好我们知道，ECMAScript的构造函数就是能创建对象的函数，那么我们有了如下写法：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("//构造器\nfunction User(realName, age) {\n\tthis.name = realName;\n\tthis.age = age;\n}\nconst user = new User(realName, age);\n")])])]),a("p",[t._v("那么之后当我们创建对象的时候，只需要进行一下简单的调用。在这个过程中，我们使用构造函数去初始化对象，就是应用了"),a("strong",[t._v("构造器模式")]),t._v("。")]),t._v(" "),a("p",[t._v("记不记得我们前面说，创建型模式关注于分离对象的创建和使用。")]),t._v(" "),a("p",[t._v("这里我们可以看到，构造器将 name、age 赋值给对象的过程封装起来，确保每个对象都有这些属性，但同时可以确保name、age取值的不同。我们是不是可以说，构造器本质上是去抽象了每个对象实例的变与不变，不变的是每个对象上都可以有相同的属性，变化的是这些属性的取值可以不同。")]),t._v(" "),a("p",[t._v("好，这是抽象对象的变与不变，那么抽象不同构造函数（类）之间的变与不变，便是我们这一part的主角：工厂模式。")]),t._v(" "),a("h3",{attrs:{id:"工厂模式-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#工厂模式-2"}},[t._v("#")]),t._v(" 工厂模式")]),t._v(" "),a("p",[t._v("接下来我们添加一需求，上面每位成员我们还需要录入他的工种及工种职责，由于大家的工种不一样，这个时候我们就需要不同的构造函数了：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function Coder(name, age) {\n\tthis.name = name\n\tthis.age = age\n\tthis.career = 'coder'\n\tthis.work = ['写代码','技术分享','取奶茶']\n}\n\nfunction ProductManager(name, age) {\n\tthis.name = name\n\tthis.age = age\n\tthis.career = 'productManager'\n\tthis.work = ['提需求','开会','点奶茶']\n}\n")])])]),a("p",[t._v("我们可以发现这两个构造函数都存在变与不变的部分，不变的是他们都拥有name，age，career，work这四个属性，变化的是不同的工种，对应的工作不同。那么接下来我们再判断不同工种应该返回什么样的对象时，可以把这个逻辑写在如下这样的函数里。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function User(name, age, career, work) {\n\tthis.name = name\n\tthis.age = age\n\tthis.career = career\n\tthis.work = work\n}\n\nfunction Factory(name, age, career) {\n\tlet work\n\tswith(career) {\n\t\tcase 'coder':\n\t\t\twork = ['写代码','技术分享','取奶茶']\n\t\t\tbreak\n\t\tcase 'boss':\n\t\t\twork = ['提需求','开会','点奶茶']\n\t\t\tbreak\n\t\tcase 'xxx':\n\t\t\t//其他工种\n\t\t\tbreak\n\treturn new User(name, age, career, work)\t\t\t\n")])])]),a("p",[t._v("这样我们就无需创建多个构造函数，只需要调用Factory无脑传参就可以了。")]),t._v(" "),a("p",[t._v("此时这个Factory函数做的事就属于工厂模式，我们可以看到它封装了创建对象的过程，而我们要做的就是无脑传参就可以了。")]),t._v(" "),a("h3",{attrs:{id:"应用实例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应用实例"}},[t._v("#")]),t._v(" 应用实例")]),t._v(" "),a("p",[t._v("上述例子还是很容易理解的，那我们接下来来一个前端应用实例看看，这里我举一个前端开发中常用的消息提示框的例子。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://pan.udolphin.com/files/image/2022/4/a10410a5e568b060ce44623be59f69a8.png",alt:""}})]),t._v(" "),a("p",[t._v("这个例子中，我们有几个简单元素：三个按钮和一个消息提示框。")]),t._v(" "),a("p",[t._v("需求是，我需要在点击成功按钮时，将提示框的背景色设置为绿色，点击警告按钮时，将背景色设置为黄色，失败时就是红色，这里我通过点击按钮时，切换消息提示框的class来实现简单的html代码如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('//body:\n  <body>\n    <div class="wrapper">\n      \x3c!-- <div class="modal error">\n        <header>sdf</header>\n      </div> --\x3e\n      <div class="btn-wrap">\n        <button data-status="S">成功</button>\n        <button data-status="W">警告</button>\n        <button data-status="E">失败</button>\n      </div>\n    </div>\n  </body>\n  \n  //style:\n   <style>\n    .modal.S {\n        background-color: #67c23a;\n      }\n      .modal.E {\n        background-color: #f56c6c;\n      }\n      .modal.W {\n        background-color: #e6a23c;\n      }\n    </style>\n')])])]),a("p",[t._v("然后是我们给按钮绑定的点击事件的js代码如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('  const changeStatus = (status: string) => {\n    switch (status) {\n      case "S":\n        oModal.className = "modal success";\n        break;\n      case "W":\n        oModal.className = "modal warning";\n        break;\n      case "E":\n        oModal.className = "modal error";\n        break;\n      default:\n        break;\n    }\n  };\n')])])]),a("p",[t._v("其中，最主要的是，changeStatus这个函数，这里我们只是做了简单的class切换。")]),t._v(" "),a("p",[t._v("那如果此时，产品经理慢慢走到你面前，说：“我要点击成功的时候，你给我放个五彩斑斓的烟花，点击警告的时候在控制台打印个警告信息，点击错误的时候跳转登陆页~巴拉巴拉吧......”，我们知道，产品经理的嘴是捂不住的，那我们怎么办，难道要在这个changeStatus函数里原地更改每个状态对应要做的事吗？")]),t._v(" "),a("p",[t._v("显然这样做是不好的，明显违背了我们经常强调的开闭原则，那么此时，我们可以借助工厂模式来实现这一需求。")]),t._v(" "),a("p",[t._v("这里其实跟前面那个根据不同工种返回不同构造函数的例子很像，我们可以造一个工厂函数，根据点击的不同按钮传入不同的状态，然后自动去实例化不同状态对应的类，实现如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('//*枚举状态\nexport enum MType {\n  success = "S",\n  warning = "W",\n  error = "E",\n}\n//*创建一个公共类，承载一些公共的方法属性\nclass Modal {\n  status: MType;\n  constructor(status: MType) {\n    this.status = status;\n  }\n  \n  get className(): string {\n    let classStr = "modal ";\n    \n    switch (this.status) {\n      case MType.success:\n        classStr += "success";\n        break;\n      case MType.warning:\n        classStr += "warning";\n        break;\n      case MType.error:\n        classStr += "error";\n        break;\n      default:\n        break;\n    }\n    return classStr;\n  }\n}\n\n//*不同的状态对应的类分开写，可以在对应类里实现各自不同的功能扩展\nclass SuccessModal extends Modal {\n  constructor() {\n    super(MType.success);\n  }\n  //放一个五彩斑斓的烟花\n}\nclass WarningModal extends Modal {\n  constructor() {\n    super(MType.warning);\n  }\n  //控制台打印信息\n}\nclass ErrorModal extends Modal {\n  constructor() {\n    super(MType.error);\n  }\n  //跳转登陆页\n}\n\n//*工厂函数，通过传入的状态来自动帮我们实例化相应的类\nclass ModalFactory {\n  dom: HTMLElement;\n  constructor(dom1: HTMLElement) {\n    this.dom = dom1;\n  }\n  modal: any = null;\n  \n  create(status: MType) {\n    switch (status) {\n      case MType.success:\n        this.modal = new SuccessModal();\n        break;\n      case MType.warning:\n        this.modal = new WarningModal();\n        break;\n      case MType.error:\n        this.modal = new ErrorModal();\n        break;\n      default:\n        break;\n    }\n    this.dom.className = this.modal.className;\n  }\n}\n\nexport default ModalFactory;\n')])])]),a("p",[t._v("那么我们使用的时候，就可以在点击事件里这样使用：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('const handleClick = (e: Event) => {\n    const tar = e.target as HTMLElement;\n    const tagName = tar.tagName.toLowerCase();\n    if (tagName === "button") {\n      const status = tar.dataset.status;\n      \n      modalFactory.create(status as MType); //通过传入的状态来自动实例化相应的类\n      \n    }\n  };\n')])])]),a("p",[t._v("看看效果：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://pan.udolphin.com/files/image/2022/4/7acfa3a6246a44fef748ca09f5b32c0f.gif",alt:""}})]),t._v(" "),a("p",[t._v("这样，我们就可以愉快地扩展功能了。")]),t._v(" "),a("p",[t._v("现在我们一起来总结一下什么是工厂模式：工厂模式其实就是**将创建对象的过程单独封装。**顺便我们还能无脑传参！")]),t._v(" "),a("h2",{attrs:{id:"装饰器模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#装饰器模式"}},[t._v("#")]),t._v(" 装饰器模式")]),t._v(" "),a("p",[t._v("装饰器模式属于结构性，前面说，结构型模式描述如何将类或者对象结合在一起形成更大的结构。那么装饰器模式呢，属于其中一小部分，就是对原对象进行包装扩展，这个过程并不改变原对象，从而实现产品经理的复杂需求。")]),t._v(" "),a("p",[t._v("下面还是说一个小需求来介绍装饰器模式：")]),t._v(" "),a("p",[t._v("这里有一段别人的代码：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("//别人代码\nlet eg = () => {\n\talert(1)\n};\n")])])]),a("p",[t._v("需求就是，你要在执行eg函数的时候，顺便再弹出一个2。")]),t._v(" "),a("p",[t._v("这里正常改的话，可能就写成这样：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("//修改代码\nlet eg = () => {\n\talert(1)\n\talert(2)\n};\n")])])]),a("p",[t._v("但，我们说这样写其实就违反了开闭原则，而且，如果这里的alert（1）并不是一句简单的执行语句，而是一堆复杂的逻辑代码，而alert（2）也并不是简单的alert（2），这个时候，怎么办呢？")]),t._v(" "),a("p",[t._v("我们可以这么写：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("//扩展函数\nconst _eg = eg;\neg = () => {\n\t_eg();\n\talert(2);\n}\n")])])]),a("p",[t._v("我们可以新建一个变量_eg先将原函数保存一下原函数的引用，然后扩展一下eg，执行刚保存的原函数_eg，然后将自己的功能扩展在原函数的下面。")]),t._v(" "),a("p",[t._v("回顾装饰器模式的定义：“在不改变原对象的基础上，对原对象进行包装扩展”，我们发现这里就是一个装饰器模式的应用。")]),t._v(" "),a("p",[t._v("这里我扯一个设计思想——AOP（Aspect Oriented Programing）：")]),t._v(" "),a("p",[t._v("为了更好的介绍AOP，我们再把它跟我们平时比较熟悉的OOP对比下：")]),t._v(" "),a("p",[t._v("我们常说要用OOP（Object Oriented Programing）——面向对象编程，那么AOP呢，就是面向切面编程，这两者并不是一个互斥的关系，他们的区别是：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("OOP")]),t._v(" "),a("th",[t._v("AOP")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("封装")]),t._v(" "),a("td",[t._v("封装的是方法和属性")])]),t._v(" "),a("tr",[a("td",[t._v("最小操作单元")]),t._v(" "),a("td",[t._v("对象")])]),t._v(" "),a("tr",[a("td",[t._v("特点")]),t._v(" "),a("td",[t._v("属性和方法都要通过对象才能调")])]),t._v(" "),a("tr",[a("td",[t._v("特点")]),t._v(" "),a("td",[t._v("把系统看成多个对象的交互")])])])]),t._v(" "),a("p",[t._v("为什么要扯AOP过来呢，因为AOP跟装饰器模式是有点像的，接下简单来说明下：")]),t._v(" "),a("p",[t._v("AOP在Java Spring的应用中，有三种通知，before（前置通知）、after（后置通知）、arround（环绕通知）。")]),t._v(" "),a("p",[t._v("什么意思呢？具体我们用ES5实现下其中一种通知，“before”就明了了。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Function.prototype.before = function (beforefn) {\n  const __self = this;\n  return function () {\n    beforefn.apply(this, arguments);\n    return __self.apply(this, arguments);\n  };\n};\n")])])]),a("p",[t._v("可以看到，我们在Function的原型里加了一个before，那其实我们前面那个实现装饰器模式的例子就可以这么写：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function  myFn(){\n  alert(2)\n}\n\neg=eg.before(myFN)\neg()\n")])])]),a("p",[t._v("那可能有的同学会说，你这样用js去实现AOP，污染原型嘛！")]),t._v(" "),a("p",[t._v("那我们不写在原型上:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("  const before=function(fn,beforeFn){\n    return function(){\n      beforeFn.apply(this,arguments);\n      return fn.apply(this,arguments);\n    }\n  }\n  cosnt eg = function(){alert(2)};\n  eg=before(eg,function(){alert(1)});\n  eg()\n")])])]),a("p",[t._v("对吧，这样我们就用一种相对比较优雅的方式实现了这个扩展需求。")]),t._v(" "),a("p",[t._v("这种方式其实在前端的应用很多，我们可以随便头脑风暴下都可以应用到哪些方面，想想有哪些不需要改变主业务，只是处理一些通用业务的部分，或者说，不改变原对象，仅仅只是对原对象进行功能的扩展。")]),t._v(" "),a("p",[t._v("那其实，ES7已经支持装饰器的语法糖，写起来更加清爽简洁（但是装饰器只能用于类和类的方法，不能用于函数，因为存在函数提升），接下来我们一起看一看。")]),t._v(" "),a("h3",{attrs:{id:"装饰器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#装饰器"}},[t._v("#")]),t._v(" 装饰器")]),t._v(" "),a("p",[t._v("装饰器是es7 中的一个提案，是一种与类（class）相关的语法，用来注释或修改类和类方法。它也是实现 AOP编程的一种重要方式。接下来看一个实例。")]),t._v(" "),a("p",[t._v("还是刚刚消息弹窗的例子，我现在要完善这个弹窗，就是我这个按钮想变成一次性的，点击完后就不允许再次点击，那么这个需求很简单，就是在按钮点击后，将按钮的disable置否。")]),t._v(" "),a("p",[t._v("我们可以这么实现：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('function disableBtn(target: any, name: string, descriptor: PropertyDescriptor) {\n  const oldValue = descriptor.value;\n  descriptor.value = function (status: string) {\n    const btn = document.querySelector(`button[data-status="${status}"]`);\n    btn.setAttribute("disabled", "true");\n    oldValue.call(this, status);\n  };\n}\n\n\nclass ModalFactory {\n  dom: HTMLElement;\n  constructor(dom1: HTMLElement) {\n    this.dom = dom1;\n  }\n  modal: any = null;\n  \n @disableBtn             //******************使用的地方在这里~！*******************//\n create(status: MType) {\n\n    switch (status) {\n      case MType.success:\n        this.modal = new SuccessModal();\n        break;\n      case MType.warning:\n        this.modal = new WarningModal();\n        break;\n      case MType.error:\n        this.modal = new ErrorModal();\n        break;\n      default:\n        break;\n    }\n    this.dom.className = this.modal.className;\n  }\n}\n')])])]),a("p",[t._v("看看效果：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://pan.udolphin.com/files/image/2022/4/38da2816644cb58a2af167c06a5fc625.gif",alt:""}})]),t._v(" "),a("p",[t._v("这样，我们就可以很方便地去扩展功能啦。")]),t._v(" "),a("p",[t._v("当然，由于浏览器还不支持装饰器，现在使用还是需要一些额外操作，你需要开启 tsconfig.json里的实验选项：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://pan.udolphin.com/files/image/2022/4/a05ce731068439e5c4ccc51b899c09f2.png",alt:""}})]),t._v(" "),a("p",[t._v("这里的disableBtn是一个方法装饰器，相关的还有类装饰器、属性装饰器、参数装饰器、访问装饰器。")]),t._v(" "),a("h4",{attrs:{id:"类装饰器、方法装饰器、属性装饰器、参数装饰器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类装饰器、方法装饰器、属性装饰器、参数装饰器"}},[t._v("#")]),t._v(" 类装饰器、方法装饰器、属性装饰器、参数装饰器")]),t._v(" "),a("p",[t._v("类装饰器、方法装饰器、属性装饰器、参数装饰器，他们各自的参数不同，我们可以通过查看其类型得知这些参数是什么。")]),t._v(" "),a("p",[t._v("下图为ts中每种装饰器的类型定义：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("//类装饰器\ndeclare type ClassDecorator = <TFunction extends Function>(target: TFunction) => TFunction | void;\n//属性装饰器\ndeclare type PropertyDecorator = (target: Object, propertyKey: string | symbol) => void;\n//方法装饰器\ndeclare type MethodDecorator = <T>(target: Object, propertyKey: string | symbol, descriptor: TypedPropertyDescriptor<T>) => TypedPropertyDescriptor<T> | void;\n//参数装饰器 \ndeclare type ParameterDecorator = (target: Object, propertyKey: string | symbol,parameterIndex: number) => void;\n")])])]),a("p",[t._v("打印不同装饰器的每一个参数：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('//类\nconst aa: ClassDecorator = (target) => {\n  console.warn("------------------------------------类装饰器");\n\n  console.log(target);\n};\n@aa\nclass A {}\n\n//方法\nconst bb: MethodDecorator = (target, name, descriptor) => {\n  console.warn("------------------------------------方法装饰器");\n\n  console.log(target);\n  console.log(name);\n  console.log(descriptor);\n};\n\nclass B {\n  @bb\n  method() {}\n}\n\n//属性\nconst cc: PropertyDecorator = (target, name) => {\n  console.warn("-----------------------------------属性装饰器");\n\n  console.log(target);\n  console.log(name);\n};\n\nclass C {\n  @cc\n  name: string;\n}\n\n//参数\nconst dd: ParameterDecorator = (target, name, index) => {\n  console.warn("------------------------------------参数装饰器");\n\n  console.log(target);\n  console.log(name);\n  console.log(index);\n};\n\nclass D {\n  method(@dd param: string) {}\n}\n')])])]),a("p",[a("img",{attrs:{src:"https://pan.udolphin.com/files/image/2022/4/08b1a60d63e496b1b89bf5eafd741a47.png",alt:""}})]),t._v(" "),a("p",[t._v("可以看到，类装饰器的参数只有一个，就是它本身。")]),t._v(" "),a("p",[t._v("方法装饰器的参数有三个，分别为当前装饰的函数的原型、当前修饰的函数名称以及一个description，里面可以看到可以拿到一些当前修饰的函数的控制权，那么有了这些控制权，我们可以做很多事。")]),t._v(" "),a("p",[t._v("属性装饰器的参数就是修饰的函数原型和修饰的属性名。")]),t._v(" "),a("p",[t._v("参数装饰器的参数就是修饰的函数原型和修饰的方法名以及参数索引。")]),t._v(" "),a("p",[t._v("其实我们平时最常用的就是方法装饰器，我们刚刚说，方法装饰器里可以拿到当前修饰函数的控制权，可以做很多事，就比如说刚刚的disableBtn，我们先通过第三个参数拿到的旧的函数值，然后添加一些自己要扩展的功能，再返回，这样就完成了一个不破坏原有结构的扩展。")]),t._v(" "),a("h3",{attrs:{id:"装饰器工厂"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#装饰器工厂"}},[t._v("#")]),t._v(" 装饰器工厂")]),t._v(" "),a("p",[t._v("还是消息提示框的例子，我们再添一个需求，就是根据点击的不同按钮，创建对应状态的消息提示框，然后消息提示框展示一秒后消失。")]),t._v(" "),a("p",[t._v("要根据点击的不同按钮，创建对应状态的消息提示框，我们首先创建一个createModal的装饰器工厂：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('export const createModal = (status: MType) => {\n  return (target: any, name: string, descriptor: PropertyDescriptor) => {\n    const oldValue = descriptor.value;\n    descriptor.value = function (status: string) {\n      const div = document.createElement("div");\n      div.className = `modal ${status}`;\n      div.innerHTML = `<header>${status}</header>`;\n      document.body.appendChild(div);\n      oldValue.call(this, status);\n    };\n  };\n};\n')])])]),a("p",[t._v("可以看到，我们传递了一个状态参数进来，然后根据不同的状态返回相应的装饰器，相当于将正常的装饰器函数外面包了一层，可以用来传参。")]),t._v(" "),a("p",[t._v("接着我们写下一秒消失的装饰器：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('export const after = (\n  target: any,\n  name: string,\n  descriptor: PropertyDescriptor\n) => {\n  const oldValue = descriptor.value;\n  descriptor.value = function (status: string) {\n    setTimeout(() => {\n      const oModal: Element = document.querySelector(".modal");\n      document.body.removeChild(oModal);\n    }, 1000);\n    oldValue.call(this, status);\n  };\n};\n')])])]),a("p",[t._v("接着我们将这两个装饰器叠加在修饰方法上：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("class ModalFactory {\n  dom: HTMLElement;\n  constructor(dom1: HTMLElement) {\n    this.dom = dom1;\n  }\n  modal: any = null;\n\n  @before(MType.success)\n  @after\n  create(status: MType, title: string) {\n      //.......\n    }\n  }\n}\n")])])]),a("p",[t._v("看看效果：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://pan.udolphin.com/files/image/2022/4/dcdf41e56ec36abc0075a08fd585b14a.gif",alt:""}})]),t._v(" "),a("p",[t._v("这样我们就实现需求啦。")]),t._v(" "),a("h3",{attrs:{id:"装饰器模式的应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#装饰器模式的应用"}},[t._v("#")]),t._v(" 装饰器模式的应用")]),t._v(" "),a("p",[t._v("前文说让大家想想装饰器模式在前端的应用，不知道大家想起了多少呢？")]),t._v(" "),a("p",[t._v("其实在装饰器模式在前端的应用很多，比如说，localStorage设置过期时间、路由守卫、请求公共参数等，其中也有很著名的应用例如React高阶组件(HOC)：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import React from 'react';\n\nexport default Component => class extends React.Component {\n  render() {\n    return <div style={{cursor: 'pointer', display: 'inline-block'}}>\n      <Component/>\n    </div>\n  }\n}\n")])])]),a("p",[t._v("这里这个装饰器（高阶组件）接受一个 React 组件作为参数，然后返回一个新的 React 组件。可以看出，就是包裹了一层 div，添加了一个 style，就这么修饰一下，以后所有被它装饰的组件都会具有这个特征。")]),t._v(" "),a("p",[t._v("我们前面说，ts的装饰器是AOP思想在前端的应用，AOP有一个特点是就是区分开主要业务和通用业务，着眼于处理通用业务。而装饰器就是用来封装通用业务，并不依赖于其他任何逻辑，这也提醒我们，其实很多通用业务我们没必要自己去造轮子嘛，说不定网上已经有现成的实现了。")]),t._v(" "),a("p",[t._v("接下来给大家推荐一个网站："),a("a",{attrs:{href:"https://github.com/jayphelps/core-decorators",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/jayphelps/core-decorators"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("里面有一些使用频率较高的装饰器，里面的实现也都是简单又通用的功能。非常推荐有兴趣的同学去看看。")]),t._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v("好啦，以上就是我今天分享的全部内容啦，我们今天好好体会了下设计模式中，结构型和创建型两种类型里的具体模式，也始终贯彻了开闭原则，认识了工厂模式和装饰器模式，也去看了对应于前端的实例，那么希望通过今天的分享能让您有所收获，特别是装饰器模式，记得用起来哦！")]),t._v(" "),a("p",[t._v("感谢您的耐心阅读，我是数字办的郭亦奇，期待与您一起成长~")])])}),[],!1,null,null,null);a.default=s.exports}}]);