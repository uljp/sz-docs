(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{306:function(t,a,s){"use strict";s.r(a);var e=s(14),r=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("本文包含四部分内容：")]),t._v(" "),a("ul",[a("li",[t._v("Linus Torvalds")]),t._v(" "),a("li",[t._v("Git 是什么")]),t._v(" "),a("li",[t._v("Git add 和 commit 内部实现原理")]),t._v(" "),a("li",[t._v("动画解析 Git 命令")])]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("先来了解一下是谁创造了Git")]),t._v(" "),a("h2",{attrs:{id:"linus-torvalds"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linus-torvalds"}},[t._v("#")]),t._v(" Linus Torvalds")]),t._v(" "),a("p",[t._v("2005 年，一位 Linux 开发成员写了一个可以连接 BitKeeper 仓库的外挂，因此 BitMover 公司认为他反编译了 BitKeeper。BitMover 决定中止 Linux 免费使用 BitKeeper 的授权。最终 Linux 团队与 BitMover 磋商无果，Torvalds 决定开发自己的版本管理系统。")]),t._v(" "),a("p",[a("strong",[t._v("十天后，git 诞生了。")])]),t._v(" "),a("p",[t._v("是的，没有搞错，就用了10天。"),a("s",[t._v("开发了一个世界上最大的 交友网站")]),t._v("！！")]),t._v(" "),a("p",[t._v("这个人就是下面这位")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://avatars.githubusercontent.com/u/1024025?v=4",alt:"test"}})]),t._v(" "),a("blockquote",[a("p",[t._v("一辈子就做成了两件事，创造了linux和Git")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("1991年 linux 0.01 开源")])]),t._v(" "),a("li",[a("p",[t._v("1997 年，《大教堂与集市》第一版发布。书中通过分析 Linux 成功的案例，总结开源开发规律。")])]),t._v(" "),a("li",[a("p",[t._v("2005 年，Git诞生")])])]),t._v(" "),a("blockquote",[a("p",[t._v("Talk is cheap. Show me the code.")])]),t._v(" "),a("p",[t._v("这句话就是出自Linus Torvards，他还有很多经典的语录，会在本篇文章结尾给出。")]),t._v(" "),a("p",[t._v("同时，他也在用实际行动告诉我们。下图是他最近一年在github上的代码提交，几乎每天都在提交代码。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://pan.udolphin.com/files/image/2021/8/4b7a35b57ffeb3671e36085a816d231d.png",alt:"image.png"}})]),t._v(" "),a("p",[t._v("Q：Git是用什么语言写的？")]),t._v(" "),a("p",[t._v("A：C语言")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("介绍完作者，现在进入正文部分。")]),t._v(" "),a("h2",{attrs:{id:"git是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git是什么"}},[t._v("#")]),t._v(" Git是什么")]),t._v(" "),a("blockquote",[a("p",[t._v("Git is a fast, scalable, distributed revision control system with an unusually rich command set that provides both high-level operations and full access to internals.")])]),t._v(" "),a("p",[t._v("上面这句话源自git仓库readme文件，包含了4个信息：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("fast：快速的，一次拉取获取到远端所有分支，大部分命令可以在本地操作")])]),t._v(" "),a("li",[a("p",[t._v("scalable：可扩展的，本地切出多分支，推送之前这些分支可以不需要和远端交互")])]),t._v(" "),a("li",[a("p",[t._v("distribution revision control system：分布式版本控制系统")])]),t._v(" "),a("li",[a("p",[t._v("unusually rich command set：非常丰富的命令集")])])]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("Q：git有多少个commands？")]),t._v(" "),a("p",[t._v("A：142 个 commands， 常用10个")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("help")]),t._v(" -a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"^  "')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("wc")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-l")]),t._v("\n")])])]),a("p",[t._v("但是在 Linus 看来，git只不过是 "),a("code",[t._v("A stupid content tracker")]),t._v(" ，这一点在分析git内部实现原理的时候会深有其感")]),t._v(" "),a("h3",{attrs:{id:"什么是版本控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是版本控制"}},[t._v("#")]),t._v(" 什么是版本控制？")]),t._v(" "),a("blockquote",[a("p",[t._v("一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。")])]),t._v(" "),a("p",[t._v("分为三种类型：")]),t._v(" "),a("ul",[a("li",[t._v("本地版本控制系统")]),t._v(" "),a("li",[t._v("集中式版本控制系统")]),t._v(" "),a("li",[t._v("分布式版本控制系统")])]),t._v(" "),a("h5",{attrs:{id:"本地版本控制系统"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#本地版本控制系统"}},[t._v("#")]),t._v(" 本地版本控制系统")]),t._v(" "),a("p",[t._v("​\t同系统上开发协同")]),t._v(" "),a("p",[t._v("​\teg：写论文的时候，只要你不是论文一把过，都会改好几次。对于每个版本的论文，许多人习惯用复制整个项目目录的方式来保存不同的版本，或许还会改名加上备份时间以示区别。 这么做唯一的好处就是简单，但是特别容易犯错。 有时候会混淆所在的工作目录，一不小心会写错文件或者覆盖意想外的文件。")]),t._v(" "),a("p",[a("code",[t._v("缺点")]),t._v("：有时候会混淆所在的工作目录，一不小心会写错文件或者覆盖意想外的文件。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/local.png",alt:"本地版本控制系统"}})]),t._v(" "),a("h5",{attrs:{id:"集中式版本控制系统-svn"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集中式版本控制系统-svn"}},[t._v("#")]),t._v(" 集中式版本控制系统 SVN")]),t._v(" "),a("p",[t._v("不同系统上的开发者协同工作")]),t._v(" "),a("p",[t._v("有一个单一的集中管理的服务器，保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新。")]),t._v(" "),a("p",[a("code",[t._v("优点")]),t._v("：管理员也可以轻松掌控每个开发者的权限")]),t._v(" "),a("p",[a("code",[t._v("缺点")]),t._v("：中央服务器的单点故障，如果宕机一小时，那么在这一小时内，谁都无法提交更新，也就无法协同工作")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/centralized.png",alt:"集中式版本控制系统"}})]),t._v(" "),a("h5",{attrs:{id:"分布式版本控制系统-git"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式版本控制系统-git"}},[t._v("#")]),t._v(" 分布式版本控制系统 Git")]),t._v(" "),a("p",[t._v("​\t每一次的克隆操作，实际上都是一次对代码仓库的完整备份")]),t._v(" "),a("p",[t._v("​\teg：每台机器都可以独立作为一个服务器")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/distributed.png",alt:"分布式版本控制"}})]),t._v(" "),a("p",[t._v("既然Git这么强，为什么Google 和 Facebook 不用 git 管理源码？")]),t._v(" "),a("p",[t._v("在美版知乎网站 StackOverflow 上曾经有一个问题《"),a("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//stackoverflow.com/questions/871/why-is-git-better-than-subversion",target:"_blank",rel:"noopener noreferrer"}},[t._v("Why is Git better than Subversion?"),a("OutboundLink")],1),t._v("》，被采纳的高赞回答是这样说的：")]),t._v(" "),a("blockquote",[a("p",[t._v("Git is not better than Subversion. But is also not worse. "),a("strong",[t._v("It's different")]),t._v(".")])]),t._v(" "),a("h2",{attrs:{id:"git-内部原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-内部原理"}},[t._v("#")]),t._v(" Git 内部原理")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://pic2.zhimg.com/v2-3bc9d5f2c49a713c776e69676d7d56c5_r.jpg",alt:"git仓库结构"}})]),t._v(" "),a("hr"),t._v(" "),a("ul",[a("li",[a("p",[t._v("Workspace：工作区")]),t._v(" "),a("p",[t._v("实际看到的目录和目录里的内容")])]),t._v(" "),a("li",[a("p",[t._v("Index / Staged： 暂存区")]),t._v(" "),a("p",[t._v("工作区中有一个隐藏目录 .git   ---\x3e  git的版本库。这个版本库里包含：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("index文件，staged")])]),t._v(" "),a("li",[a("p",[t._v("git自动创建的master分支")])]),t._v(" "),a("li",[a("p",[t._v("指向master的第一个指针Head")])])])]),t._v(" "),a("li",[a("p",[t._v("Repository： 本地仓库")])]),t._v(" "),a("li",[a("p",[t._v("Remote： 远程仓库")])])]),t._v(" "),a("p",[t._v("这里只介绍add和commit的过程")]),t._v(" "),a("p",[t._v("一个git仓库.git 目录下会包含以下内容")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-F1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 得到以下内容")]),t._v("\nconfig\ndescription\nHEAD\nhooks/\ninfo/\nobjects/\nrefs/\n")])])]),a("ul",[a("li",[a("code",[t._v("config")]),t._v(" 文件包含项目特有的配置选项。")]),t._v(" "),a("li",[a("code",[t._v("description")]),t._v(" 文件仅供 GitWeb 程序使用，我们无需关心")]),t._v(" "),a("li",[a("code",[t._v("info")]),t._v(" 目录包含一个全局性排除（global exclude）文件， 用以放置那些不希望被记录在 "),a("code",[t._v(".gitignore")]),t._v(" 文件中的忽略模式（ignored patterns）。")]),t._v(" "),a("li",[a("code",[t._v("hooks")]),t._v(" 目录包含客户端或服务端的钩子脚本（hook scripts）cat")]),t._v(" "),a("li",[a("code",[t._v("HEAD")]),t._v(" 文件："),a("code",[t._v("HEAD")]),t._v(" 文件指向目前被检出的分支")]),t._v(" "),a("li",[t._v("（尚待创建的）"),a("code",[t._v("index")]),t._v(" 文件："),a("code",[t._v("index")]),t._v(" 文件保存暂存区信息")]),t._v(" "),a("li",[a("code",[t._v("objects")]),t._v(" 目录：存储所有数据内容")]),t._v(" "),a("li",[a("code",[t._v("refs")]),t._v(" 目录：存储指向数据（分支、远程仓库和标签等）的提交对象的指针")])]),t._v(" "),a("h3",{attrs:{id:"创建一个新的文件夹"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建一个新的文件夹"}},[t._v("#")]),t._v(" 创建一个新的文件夹")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建 project 文件夹")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" project\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 打开 project 文件夹")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" project\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 初始化")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" init\n")])])]),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看git目录树结构")]),t._v("\n$ tree .git/\n\n.git\n├── HEAD\n├── config\n├── description\n├── hooks\n│   ├── applypatch-msg.sample\n│   ├── commit-msg.sample\n│   ├── fsmonitor-watchman.sample\n│   ├── post-update.sample\n│   ├── pre-applypatch.sample\n│   ├── pre-commit.sample\n│   ├── pre-merge-commit.sample\n│   ├── pre-push.sample\n│   ├── pre-rebase.sample\n│   ├── pre-receive.sample\n│   ├── prepare-commit-msg.sample\n│   ├── push-to-checkout.sample\n│   └── update.sample\n├── info\n│   └── exclude\n├── objects\n│   ├── info\n│   └── pack\n└── refs\n    ├── heads\n    └── tags\n")])])]),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建一个新文件")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello demo'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" demo1.txt\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-al")]),t._v("\n\ndrwxr-xr-x   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" panlei  staff  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("128")]),t._v(" Aug  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("22")]),t._v(":27 "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\ndrwxr-xr-x   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(" panlei  staff  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("192")]),t._v(" Aug  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("22")]),t._v(":24 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("\ndrwxr-xr-x  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v(" panlei  staff  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("384")]),t._v(" Aug  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("22")]),t._v(":46 .git\n-rw-r--r--   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" panlei  staff   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),t._v(" Aug  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("22")]),t._v(":27 demo1.txt\n")])])]),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用 git add命令")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" demo1.txt\n")])])]),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 这个时候再查看.git目录下的内容")]),t._v("\n$ tree .git\n\n.git\n├── HEAD\n├── config\n├── description\n├── hooks\n│   ├── applypatch-msg.sample\n│   ├── commit-msg.sample\n│   ├── fsmonitor-watchman.sample\n│   ├── post-update.sample\n│   ├── pre-applypatch.sample\n│   ├── pre-commit.sample\n│   ├── pre-merge-commit.sample\n│   ├── pre-push.sample\n│   ├── pre-rebase.sample\n│   ├── pre-receive.sample\n│   ├── prepare-commit-msg.sample\n│   ├── push-to-checkout.sample\n│   └── update.sample\n├── index\n├── info\n│   └── exclude\n├── objects\n│   ├── "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("90")]),t._v("\n│   │   └── dd573a597ea266ffd31bb0c2feff9eabdafdac\n│   ├── info\n│   └── pack\n└── refs\n    ├── heads\n    └── tags\n")])])]),a("p",[t._v("发现在目录下多出了一个 hash 值，这个hash值是什么呢？")]),t._v(" "),a("p",[t._v("会不会是文件内容呢，毕竟前面有说到 git 是 content tracker。打印出来看一下")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello demo'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" hash-object "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--stdin")]),t._v("\n\n90dd573a597ea266ffd31bb0c2feff9eabdafdac\n")])])]),a("p",[t._v("真的就对应着文件内容。")]),t._v(" "),a("h4",{attrs:{id:"为什么objects里生成的hash一分为二了"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么objects里生成的hash一分为二了"}},[t._v("#")]),t._v(" 为什么objects里生成的hash一分为二了？")]),t._v(" "),a("p",[t._v("A：40 个字符串里有2个拎出来做文件夹名，38位做文件名")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看新文件的hash 值")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello demo'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" hash-object "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--stdin")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -w")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Actually write the object into the object database.")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# --stdin")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Read the object from standard input instead of from a file.")]),t._v("\n")])])]),a("blockquote",[a("p",[a("strong",[t._v("SHA-1")])]),t._v(" "),a("p",[t._v("Secure Hash Algorithm 1 安全散列算法1")]),t._v(" "),a("p",[t._v("散列值通常的呈现形式为40个"),a("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6",target:"_blank",rel:"noopener noreferrer"}},[t._v("十六进制"),a("OutboundLink")],1),t._v("数。")]),t._v(" "),a("p",[t._v("05年密码分析人员发现了对SHA-1的有效攻击方法，这表明该算法可能不够安全，不能继续使用")])]),t._v(" "),a("h5",{attrs:{id:"a1-trie-踹-树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#a1-trie-踹-树"}},[t._v("#")]),t._v(" A1 - trie（踹） 树")]),t._v(" "),a("blockquote",[a("p",[t._v("单词查找树，是一种树形结构，用于保存大量的字符串")])]),t._v(" "),a("p",[t._v("优点是：检索快，利用字符串的公共前缀来节约存储空间。")]),t._v(" "),a("h5",{attrs:{id:"a2-文件数量限制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#a2-文件数量限制"}},[t._v("#")]),t._v(" A2 - 文件数量限制")]),t._v(" "),a("p",[t._v("单目录下的文件在某些文件系统是有限制的，通过这种方式缓解这个问题")]),t._v(" "),a("p",[t._v("Q2：一般来说，存文件会存时间戳，这里没有记录时间戳，文件内容和时间戳都丢失了吗？")]),t._v(" "),a("p",[t._v("A：Git hash的是content，不在乎state是什么。但是Git还是要存这些文件state的，存在stage files里面")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看 git stage 里的内容")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示有关索引和工作树中文件的信息")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" ls-files "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--stage")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100644")]),t._v(" 90dd573a597ea266ffd31bb0c2feff9eabdafdac "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\tdemo1.txt\n")])])]),a("p",[t._v("Q：100644 是什么意思？")]),t._v(" "),a("p",[t._v("A：前三位代表了文件类型。100 是普通文件")]),t._v(" "),a("hr"),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v(" Linux 系统中采用三位十进制数表示权限，如0755， 0644.\n \n    A - 0， 十进制\n    B - 用户\n    C - 组用户\n    D - 其他用户\n\n    ---  -> 0  (no execute , no write ,no read)\n    --x  -> 1  execute, (no write, no read)\n    -w-  -> 2  write \n    -wx  -> 3  write, execute\n    r--  -> 4  read\n    r-x  -> 5  read, execute\n    rw-  -> 6  read, write\n    rwx  -> 7  read, write , execute\n\n\n 一般赋予目录0755权限，文件0644权限\n")])])]),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 打印生成的文件里的内容, 只要给hash值前几位")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" cat-file "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-p")]),t._v(" 90dd\n\nhello demo\n")])])]),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 打印文件的类型")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" cat-file "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-t")]),t._v(" 90dd\n\nblob\n")])])]),a("p",[t._v("从这里可以发现，文件内容是以blob（Binary large object）存储的")]),t._v(" "),a("h3",{attrs:{id:"git-add-做了什么事情"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-add-做了什么事情"}},[t._v("#")]),t._v(" Git add 做了什么事情")]),t._v(" "),a("p",[t._v("1、把这个文件写成hash，文件内容是以二进制形式存储为一个Blob, 这个Blob file的名字是文件内容的hash值。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello demo'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" hash-object "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-w")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--stdin")]),t._v("\n\n90dd573a597ea266ffd31bb0c2feff9eabdafdac\n")])])]),a("p",[t._v("2、update-index，即放进stage area")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" update-index "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--add")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--cacheinfo")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10064")]),t._v(" df33e3965574decdfb364081521647a848324280 hello.txt\n")])])]),a("p",[t._v("git add 只会对文件做hash，不关心目录。没有commit之前，目录存在index里")]),t._v(" "),a("h3",{attrs:{id:"git-commit-做了什么事情"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-commit-做了什么事情"}},[t._v("#")]),t._v(" Git commit 做了什么事情")]),t._v(" "),a("p",[t._v("Q：执行一次 commit 新增了几个文件?")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v(".git\n├── COMMIT_EDITMSG\n├── HEAD\n├── config\n├── description\n├── hooks\n│   ├── applypatch-msg.sample\n│   ├── commit-msg.sample\n│   ├── fsmonitor-watchman.sample\n│   ├── post-update.sample\n│   ├── pre-applypatch.sample\n│   ├── pre-commit.sample\n│   ├── pre-merge-commit.sample\n│   ├── pre-push.sample\n│   ├── pre-rebase.sample\n│   ├── pre-receive.sample\n│   ├── prepare-commit-msg.sample\n│   ├── push-to-checkout.sample\n│   └── update.sample\n├── index\n├── info\n│   └── exclude\n├── logs\n│   ├── HEAD\n│   └── refs\n│       └── heads\n│           └── master\n├── objects\n│   ├── "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("83")]),t._v("\n│   │   └── 250377d70e516ddcd4b0257868c949b04a5562\n│   ├── "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("90")]),t._v("\n│   │   └── dd573a597ea266ffd31bb0c2feff9eabdafdac\n│   ├── "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("93")]),t._v("\n│   │   └── 0e4c9864e59861622b5c3252000abff81b0d7b\n│   ├── info\n│   └── pack\n└── refs\n    ├── heads\n    │   └── master\n    └── tags\n\n")])])]),a("p",[t._v("A：生成了两个文件")]),t._v(" "),a("p",[t._v("第一个文件里是一个commit object，这里面带有commit-message、author、tree")]),t._v(" "),a("blockquote",[a("p",[t._v("tree 是目录，根结点")])]),t._v(" "),a("p",[t._v("第二个文件是一个tree")]),t._v(" "),a("p",[t._v("第三个文件也就是刚才add的那个Blob文件")]),t._v(" "),a("h4",{attrs:{id:"git-log"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-log"}},[t._v("#")]),t._v(" Git log")]),t._v(" "),a("p",[t._v("Q：git log的时候怎么知道从哪个commit开始看？")]),t._v(" "),a("p",[t._v("A：refs")]),t._v(" "),a("p",[t._v("最早创建HEAD的时候，里面有内容，指向refs/heads/master，里面是一个hash，hash指向commit")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" .git/HEAD\nref: refs/heads/master\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" .git/refs/heads/master\nsdfafsad2ewadsad -"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("hash")]),t._v("\n")])])]),a("p",[t._v("Q：git 文件越来越大怎么办？")]),t._v(" "),a("p",[t._v("A：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除数据库中不需要的文件和将其他文件打包成一种更有效的格式。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# garbage collection")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" gc\n")])])]),a("h2",{attrs:{id:"动画解析-git-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动画解析-git-命令"}},[t._v("#")]),t._v(" 动画解析 Git 命令")]),t._v(" "),a("p",[t._v("动画的形式能帮助更好地学习和理解git。来自 "),a("a",{attrs:{href:"https://dev.to/lydiahallie/cs-visualized-useful-git-commands-37p1",target:"_blank",rel:"noopener noreferrer"}},[t._v("Lydia Hallie"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("平常的练习可以通过 "),a("a",{attrs:{href:"https://learngitbranching.js.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("动画学习Git网站"),a("OutboundLink")],1),t._v(" 来学习")]),t._v(" "),a("h3",{attrs:{id:"git-merge"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-merge"}},[t._v("#")]),t._v(" git merge")]),t._v(" "),a("p",[t._v("将两个或多个开发历史连接在一起")]),t._v(" "),a("h4",{attrs:{id:"fast-forward"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fast-forward"}},[t._v("#")]),t._v(" fast forward")]),t._v(" "),a("p",[t._v("Git 默认使用 fast-forward 这种类型来处理分支合并，当我们成功合并后，不会产生任何提交记录")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://res.cloudinary.com/practicaldev/image/fetch/s--cT4TSe48--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/894znjv4oo9agqiz4dql.gif",alt:"fast forward"}})]),t._v(" "),a("h4",{attrs:{id:"no-fast-forward"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#no-fast-forward"}},[t._v("#")]),t._v(" no fast forward")]),t._v(" "),a("p",[t._v("在合并分支命令加入 "),a("code",[t._v("--no-ff")]),t._v(" 后缀的方式运行时，便会生成一个新的提交记录（推荐多人协作开发使用）")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://res.cloudinary.com/practicaldev/image/fetch/s--zRZ0x2Vc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rf1o2b6eduboqwkigg3w.gif",alt:"no fast forward"}})]),t._v(" "),a("p",[t._v("合并产生冲突的时候可以编辑处理冲突后，再走正常的提交流程")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://pic2.zhimg.com/v2-541bb7ef46a76b0be1f055427e7e94e1_b.webp",alt:"conflict"}})]),t._v(" "),a("h3",{attrs:{id:"git-rebase"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-rebase"}},[t._v("#")]),t._v(" git rebase")]),t._v(" "),a("p",[t._v("改变当前分支的基座节点")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://res.cloudinary.com/practicaldev/image/fetch/s--EIY4OOcE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dwyukhq8yj2xliq4i50e.gif",alt:"git rebase"}})]),t._v(" "),a("p",[t._v("在"),a("code",[t._v("rebase")]),t._v("的过程中，也许会出现冲突(conflict)。在这种情况，Git会停止"),a("code",[t._v("rebase")]),t._v("并会让你去解决冲突；在解决完冲突后，用”"),a("code",[t._v("git add")]),t._v("“命令去更新这些内容的索引(index), 然后，你无需执行 "),a("code",[t._v("git commit")]),t._v(",只要执行:")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--continue")]),t._v("\n")])])]),a("p",[t._v("这样git会继续应用(apply)余下的补丁。")]),t._v(" "),a("p",[t._v("在任何时候，可以用"),a("code",[t._v("--abort")]),t._v("参数来终止"),a("code",[t._v("rebase")]),t._v("的操作，并且”"),a("code",[t._v("mywork")]),t._v("“ 分支会回到"),a("code",[t._v("rebase")]),t._v("开始前的状态。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--abort")]),t._v("\n")])])]),a("h4",{attrs:{id:"interactive-rebase"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#interactive-rebase"}},[t._v("#")]),t._v(" Interactive Rebase")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ $ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-i")]),t._v(" ee9ee598ea2a4bece9b23\n")])])]),a("p",[t._v("交互式变基，可以在rebase过程中对改变的commit进行操作")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("reword: Change the commit message")]),t._v(" "),a("p",[t._v("保留该commit，但我需要修改该commit的注释（缩写:r）")])]),t._v(" "),a("li",[a("p",[t._v("edit: Amend this commit")]),t._v(" "),a("p",[t._v("保留该commit, 但我要停下来修改该提交(不仅仅修改注释)（缩写:e）")])]),t._v(" "),a("li",[a("p",[t._v("squash: Meld commit into the previous commit")]),t._v(" "),a("p",[t._v("将该commit和前一个commit合并（缩写:s）")])]),t._v(" "),a("li",[a("p",[t._v("fixup: Meld commit into the previous commit, without keeping the commit's log message")]),t._v(" "),a("p",[t._v("将该commit和前一个commit合并，但我不要保留该提交的注释信息（缩写:f）")])]),t._v(" "),a("li",[a("p",[t._v("exec: Run a command on each commit we want to rebase")]),t._v(" "),a("p",[t._v("执行shell命令（缩写:x）")])]),t._v(" "),a("li",[a("p",[t._v("drop: Remove the commit")]),t._v(" "),a("p",[t._v("我要丢弃该commit（缩写:d）")])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://res.cloudinary.com/practicaldev/image/fetch/s--P6jr7igd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/msofpv7k6rcmpaaefscm.gif",alt:"git rebase"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://res.cloudinary.com/practicaldev/image/fetch/s--VSQt4g1V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bc1r460xx1i0blu0lnnm.gif",alt:"gi rebase"}})]),t._v(" "),a("h3",{attrs:{id:"git-reset"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-reset"}},[t._v("#")]),t._v(" git reset")]),t._v(" "),a("h4",{attrs:{id:"git-reset-mixed"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-reset-mixed"}},[t._v("#")]),t._v(" git reset --mixed")]),t._v(" "),a("p",[t._v("默认mixed")]),t._v(" "),a("p",[t._v("①移动本地库HEAD指针")]),t._v(" "),a("p",[t._v("②重置暂存区")]),t._v(" "),a("p",[t._v("意思就是，回滚后，不仅移动了本地库的指针，同时暂存区的东西也没了，意思就是你上次添加到暂存区的文件没了-")]),t._v(" "),a("h4",{attrs:{id:"git-reset-soft"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-reset-soft"}},[t._v("#")]),t._v(" git reset --soft")]),t._v(" "),a("p",[t._v("①移动本地库HEAD指针")]),t._v(" "),a("p",[t._v("意思就是，回滚后，仅仅是把本地库的指针移动了，而暂存区和你本地的代码是没有做任何改变的。而你上次改动已提交committed到本地库的代码显示是绿色即未提交")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://res.cloudinary.com/practicaldev/image/fetch/s---GveiZe---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/je5240aqa5uw9d8j3ibb.gif",alt:"git reset --soft"}})]),t._v(" "),a("h4",{attrs:{id:"git-reset-hard"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-reset-hard"}},[t._v("#")]),t._v(" git reset --hard")]),t._v(" "),a("p",[t._v("①移动本地库HEAD指针")]),t._v(" "),a("p",[t._v("②重置暂存区")]),t._v(" "),a("p",[t._v("③重置工作区")]),t._v(" "),a("p",[t._v("意思就是，回滚后，本地代码就是你回退版本的代码")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://res.cloudinary.com/practicaldev/image/fetch/s--GqjwnYkF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hlh0kowt3hov1xhcku38.gif",alt:"git reset --hard"}})]),t._v(" "),a("h3",{attrs:{id:"git-revert"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-revert"}},[t._v("#")]),t._v(" git revert")]),t._v(" "),a("p",[t._v("git revert 后多出一条commit ，提醒同事，这里有回撤操作，只能撤回最新的提交")]),t._v(" "),a("p",[t._v("git reset 直接把之前 commit 删掉，非git reset --hard的操作是不会删掉修改代码，如果远程已经有之前代码，需要强推 git push origin 【分支名】 --force")]),t._v(" "),a("p",[t._v("注意： 慎用revert ！！！")]),t._v(" "),a("p",[t._v("多人协同开发时，get revert 会影响到其他人的代码")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://res.cloudinary.com/practicaldev/image/fetch/s--eckmvr2M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3kkd2ahn41zixs12xgpf.gif",alt:"git revert"}})]),t._v(" "),a("h3",{attrs:{id:"git-cherry-pick"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-cherry-pick"}},[t._v("#")]),t._v(" git cherry-pick")]),t._v(" "),a("p",[t._v("不是合并内容，只是想把某次提交摘取过来")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--oneline")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--graph")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--all")]),t._v("\n")])])]),a("p",[a("img",{attrs:{src:"https://res.cloudinary.com/practicaldev/image/fetch/s--9vWP_K4S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2dkjx4yeaal10xyvj29v.gif",alt:"git cherry-pick"}})]),t._v(" "),a("h3",{attrs:{id:"git-fetch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-fetch"}},[t._v("#")]),t._v(" git fetch")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://res.cloudinary.com/practicaldev/image/fetch/s--38PuARw2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bulx1voegfji4vwgndh4.gif",alt:"git fetch"}})]),t._v(" "),a("h3",{attrs:{id:"git-pull"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-pull"}},[t._v("#")]),t._v(" git pull")]),t._v(" "),a("p",[t._v("虽然 "),a("code",[t._v("git fetch")]),t._v("对于获取分支的远程信息非常有用，但我们也可以执行  "),a("code",[t._v("git pull")]),t._v("。"),a("code",[t._v("git pull")]),t._v("实际上是两个命令合二为一： "),a("code",[t._v("git fetch")]),t._v("和 a "),a("code",[t._v("git merge")]),t._v("。当我们从原点拉取更改时，我们首先像使用 "),a("code",[t._v("git pull")]),t._v("一样获取所有数据"),a("code",[t._v("git fetch")]),t._v("，之后最新的更改会自动合并到本地分支中。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://res.cloudinary.com/practicaldev/image/fetch/s---X5AXldj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zifpnl1h6a4tk4qdc9sy.gif",alt:"git pull"}})]),t._v(" "),a("h3",{attrs:{id:"git-reflog"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-reflog"}},[t._v("#")]),t._v(" git reflog")]),t._v(" "),a("p",[a("code",[t._v("功能")]),t._v("：管理 reflog 信息、")]),t._v(" "),a("p",[t._v("git reflog 可以查看所有分支的所有操作记录（包括commit和reset的操作、已被删除的commit记录）\ngit log则不能察看已经删除了的commit记录")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reflog "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-3")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reflog "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-all")]),t._v("\n")])])]),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--oneline")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-6")]),t._v("\n")])])]),a("p",[a("img",{attrs:{src:"https://res.cloudinary.com/practicaldev/image/fetch/s--MMUdOS0P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1aqek1py1knwl926ele7.gif",alt:"git reflog"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://res.cloudinary.com/practicaldev/image/fetch/s--A1UMM2AH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9z9rhtbw7mrigp0miijz.gif",alt:"git reflog"}})]),t._v(" "),a("h3",{attrs:{id:"git-stash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-stash"}},[t._v("#")]),t._v(" git stash")]),t._v(" "),a("p",[t._v("这个就是把当前开发内容藏起来")]),t._v(" "),a("p",[t._v("比如，现在正在开发一小块新功能（还没写完），突然线上有bug要紧急修复。这时候需要切换分支来修复，可以考虑使用 "),a("code",[t._v("git stash")]),t._v(" 命令先藏起来。等到修复完bug之后再切回来。然后使用"),a("code",[t._v("git stash pop")]),t._v("将刚才没开发完的继续开发")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 两种方式去隐藏")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1、")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash pop\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2、")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash apply stash@"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"linus-torvalds-语录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linus-torvalds-语录"}},[t._v("#")]),t._v(" Linus Torvalds 语录")]),t._v(" "),a("p",[t._v("这个可爱又暴脾气的天才，在"),a("a",{attrs:{href:"https://en.wikiquote.org/wiki/Linus_Torvalds",target:"_blank",rel:"noopener noreferrer"}},[t._v("wikiquote"),a("OutboundLink")],1),t._v("上收录了他的很多语录 。这里只摘取一小部分。")]),t._v(" "),a("blockquote",[a("p",[t._v("Talk is cheap. Show me the code.")])]),t._v(" "),a("blockquote",[a("p",[t._v("If you still don’t like it, that’s OK: that’s why I’m boss. I simply know better than you do.")])]),t._v(" "),a("blockquote",[a("p",[t._v("Nobody actually creates perfect code the first time around, except me. But there’s only one of me.")])]),t._v(" "),a("blockquote",[a("p",[t._v("Really, I’m not out to destroy Microsoft. That will just be a completely unintentional side effect.")])]),t._v(" "),a("blockquote",[a("p",[t._v("Real quality means making sure that people are proud of the code they write, that they’re involved and taking it personally.")])]),t._v(" "),a("blockquote",[a("p",[t._v("Standards are paper. I use paper to wipe my butt every day. That’s how much that paper is worth.")])]),t._v(" "),a("blockquote",[a("p",[t._v("“Regression testing”? What’s that? If it compiles, it is good; if it boots up, it is perfect.")])])])}),[],!1,null,null,null);a.default=r.exports}}]);